program -> declaration* EOF

declaration -> classDecl | funDecl | varDecl | statement;

classDecl -> 'class' IDENTIFIER (':' IDENTIFIER)? '{' funDecl* '}'

funDecl -> 'fun' IDENTIFIER '(' parameters? ') blockStmt

parameters -> IDENTIFIER (',' IDENTIFIER)*

varDecl -> 'var' IDENTIFIER ('=' expression)? ';'

statement -> printStmt | exprStmt | blockStmt | ifStmt
            | whileStmt | forStmt | breakStmt | continueStmt
            | returnStmt

ifStmt -> 'if' '(' expression ')' statement ('else' statement)?

whileStmt -> 'while' '(' expression ')' statement

forStmt -> 'for' '('
                (varDecl | exprStmt | ';')
                expression? ';'
                expression? ')'
            statement

breakStmt -> 'break' ';'

continueStmt -> 'continue' ';'

blockStmt -> '{' declaration* '}'

returnStmt -> 'return' expr? ';'

printStmt -> 'print' assignment (',' assignment)* ';'

exprStmt -> expression ';'

expression -> comma

comma -> assignment (',' assignment)*

assignment -> (call '.')? IDENTIFIER '=' assignment 
             | ternary

ternary -> logic_or ('?' ternary ':' ternary)?

logic_or -> logic_and ('||' logic_and)*

logic_and -> equality ('&&' equality)*

equality -> comparison (('==' | '!=') comparison)*

comparison -> addition (('>' | '>=' | '<' | '<=') addition)*

addition -> multiplication (('+' | '-') multiplication)*

multiplication -> unary (('*' | '/') unary)*

unary -> (('!' | '-') unary) | primary

call -> primary ( '(' arguments? ')' | "." IDENTIFIER )*

arguments -> assignment (',' assignment)*

primary -> 'true' | 'false' | NUMBER | STRING | ARRAY
	| '(' expression ')' | IDENTIFIER | 'this'
	| 'super' '.' IDENTIFIER

ARRAY -> '[' assignment (',' assignment)* ']'